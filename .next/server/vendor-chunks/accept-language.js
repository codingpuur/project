"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/accept-language";
exports.ids = ["vendor-chunks/accept-language"];
exports.modules = {

/***/ "(rsc)/./node_modules/accept-language/Build/Source/AcceptLanguage.js":
/*!*********************************************************************!*\
  !*** ./node_modules/accept-language/Build/Source/AcceptLanguage.js ***!
  \*********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar bcp47 = __webpack_require__(/*! bcp47 */ \"(rsc)/./node_modules/bcp47/lib/index.js\");\nvar AcceptLanguage = /** @class */ (function () {\n    function AcceptLanguage() {\n        this.languageTagsWithValues = {};\n        this.defaultLanguageTag = null;\n    }\n    AcceptLanguage.prototype.languages = function (definedLanguages) {\n        var _this = this;\n        if (definedLanguages.length < 1) {\n            throw new Error('No language tags defined. Provide at least 1 language tag to match.');\n        }\n        this.languageTagsWithValues = {};\n        definedLanguages.forEach(function (languageTagString) {\n            var languageTag = bcp47.parse(languageTagString);\n            if (!languageTag) {\n                throw new TypeError(\"'\".concat(languageTagString, \"' is not bcp47 compliant. More about bcp47 https://tools.ietf.org/html/bcp47.\"));\n            }\n            var language = languageTag.langtag.language.language;\n            if (!language) {\n                throw new TypeError(\"\".concat(languageTagString, \" is not supported.\"));\n            }\n            var langtag = languageTag.langtag;\n            var languageTagWithValues = langtag;\n            languageTagWithValues.value = languageTagString;\n            var lowerCasedLanguageTagWithValues = {\n                language: {\n                    language: langtag.language.language.toLowerCase(),\n                    extlang: langtag.language.extlang.map(function (e) { return e.toLowerCase(); }),\n                },\n                region: langtag.region && langtag.region.toLowerCase(),\n                script: langtag.script && langtag.script.toLowerCase(),\n                variant: langtag.variant.map(function (v) { return v.toLowerCase(); }),\n                privateuse: langtag.privateuse.map(function (p) { return p.toLowerCase(); }),\n                extension: langtag.extension.map(function (e) {\n                    return {\n                        extension: e.extension && e.extension.map(function (e) { return e.toLowerCase(); }),\n                        singleton: e.singleton.toLowerCase(),\n                    };\n                }),\n                value: languageTagString,\n            };\n            if (!_this.languageTagsWithValues[language]) {\n                _this.languageTagsWithValues[language] = [lowerCasedLanguageTagWithValues];\n            }\n            else {\n                _this.languageTagsWithValues[language].push(lowerCasedLanguageTagWithValues);\n            }\n        });\n        this.defaultLanguageTag = definedLanguages[0];\n    };\n    AcceptLanguage.prototype.get = function (languagePriorityList) {\n        return this.parse(languagePriorityList)[0];\n    };\n    AcceptLanguage.prototype.create = function () {\n        return null;\n    };\n    AcceptLanguage.prototype.parse = function (languagePriorityList) {\n        if (!languagePriorityList) {\n            return [this.defaultLanguageTag];\n        }\n        var parsedAndSortedLanguageTags = parseAndSortLanguageTags(languagePriorityList);\n        var result = [];\n        for (var _i = 0, parsedAndSortedLanguageTags_1 = parsedAndSortedLanguageTags; _i < parsedAndSortedLanguageTags_1.length; _i++) {\n            var languageTag = parsedAndSortedLanguageTags_1[_i];\n            var requestedLang = bcp47.parse(languageTag.tag);\n            if (!requestedLang) {\n                continue;\n            }\n            var requestedLangTag = requestedLang.langtag;\n            if (!this.languageTagsWithValues[requestedLangTag.language.language]) {\n                continue;\n            }\n            middle: for (var _a = 0, _b = this.languageTagsWithValues[requestedLangTag.language.language]; _a < _b.length; _a++) {\n                var definedLangTag = _b[_a];\n                var unmatchedRequestedSubTag = 0;\n                for (var _c = 0, _d = ['privateuse', 'extension', 'variant', 'region', 'script']; _c < _d.length; _c++) {\n                    var prop = _d[_c];\n                    var definedLanguagePropertValue = definedLangTag[prop];\n                    if (!definedLanguagePropertValue) {\n                        var requestedLanguagePropertyValue_1 = requestedLangTag[prop];\n                        if (requestedLanguagePropertyValue_1) {\n                            unmatchedRequestedSubTag++;\n                        }\n                        switch (prop) {\n                            case 'privateuse':\n                            case 'variant':\n                                for (var i = 0; i < requestedLanguagePropertyValue_1.length; i++) {\n                                    if (requestedLanguagePropertyValue_1[i]) {\n                                        unmatchedRequestedSubTag++;\n                                    }\n                                }\n                                break;\n                            case 'extension':\n                                for (var i = 0; i < requestedLanguagePropertyValue_1.length; i++) {\n                                    var extension = requestedLanguagePropertyValue_1[i].extension;\n                                    for (var ei = 0; ei < extension.length; ei++) {\n                                        if (!requestedLanguagePropertyValue_1[i].extension[ei]) {\n                                            unmatchedRequestedSubTag++;\n                                        }\n                                    }\n                                }\n                                break;\n                        }\n                        continue;\n                    }\n                    // Filter out wider requested languages first. If someone requests 'zh'\n                    // and my defined language is 'zh-Hant'. I cannot match 'zh-Hant', because\n                    // 'zh' is wider than 'zh-Hant'.\n                    var requestedLanguagePropertyValue = requestedLangTag[prop];\n                    if (!requestedLanguagePropertyValue) {\n                        continue middle;\n                    }\n                    switch (prop) {\n                        case 'privateuse':\n                        case 'variant':\n                            for (var i = 0; i < definedLanguagePropertValue.length; i++) {\n                                if (!requestedLanguagePropertyValue[i] || definedLanguagePropertValue[i] !== requestedLanguagePropertyValue[i].toLowerCase()) {\n                                    continue middle;\n                                }\n                            }\n                            break;\n                        case 'extension':\n                            for (var i = 0; i < definedLanguagePropertValue.length; i++) {\n                                var extension = definedLanguagePropertValue[i].extension;\n                                for (var ei = 0; ei < extension.length; ei++) {\n                                    if (!requestedLanguagePropertyValue[i]) {\n                                        continue middle;\n                                    }\n                                    if (!requestedLanguagePropertyValue[i].extension[ei]) {\n                                        continue middle;\n                                    }\n                                    if (extension[ei] !== requestedLanguagePropertyValue[i].extension[ei].toLowerCase()) {\n                                        continue middle;\n                                    }\n                                }\n                            }\n                            break;\n                        default:\n                            if (definedLanguagePropertValue !== requestedLanguagePropertyValue.toLowerCase()) {\n                                continue middle;\n                            }\n                    }\n                }\n                result.push({\n                    unmatchedRequestedSubTag: unmatchedRequestedSubTag,\n                    quality: languageTag.quality,\n                    languageTag: definedLangTag.value\n                });\n            }\n        }\n        return result.length > 0 ? result.sort(function (a, b) {\n            var quality = b.quality - a.quality;\n            if (quality != 0) {\n                return quality;\n            }\n            return a.unmatchedRequestedSubTag - b.unmatchedRequestedSubTag;\n        }).map(function (l) { return l.languageTag; }) : [this.defaultLanguageTag];\n        function parseAndSortLanguageTags(languagePriorityList) {\n            return languagePriorityList.split(',').map(function (weightedLanguageRange) {\n                var components = weightedLanguageRange.replace(/\\s+/, '').split(';');\n                return {\n                    tag: components[0],\n                    quality: components[1] ? parseFloat(components[1].split('=')[1]) : 1.0\n                };\n            })\n                // Filter non-defined language tags\n                .filter(function (languageTag) {\n                if (!languageTag) {\n                    return false;\n                }\n                if (!languageTag.tag) {\n                    return false;\n                }\n                return languageTag;\n            });\n        }\n    };\n    return AcceptLanguage;\n}());\nfunction create() {\n    var al = new AcceptLanguage();\n    al.create = function () {\n        return new AcceptLanguage();\n    };\n    return al;\n}\nmodule.exports = create();\nmodule.exports[\"default\"] = create();\nexports[\"default\"] = create();\n//# sourceMappingURL=AcceptLanguage.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/accept-language/Build/Source/AcceptLanguage.js\n");

/***/ })

};
;